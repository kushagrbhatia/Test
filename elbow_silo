import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Step 1: Prepare Your Data
# Assuming 'filtered_df' is your DataFrame with a time series index
# And 'CpuUsageP95', 'CpuDemandP95', 'MemUsageP95' are your columns

# Ensure the index is a datetime index
filtered_df['timestamp'] = pd.to_datetime(filtered_df['timestamp'])  # Replace 'timestamp' with your actual time column
filtered_df.set_index('timestamp', inplace=True)

# Visualize the data
plt.figure(figsize=(10, 6))
plt.plot(filtered_df['CpuUsageP95'], label='CpuUsageP95')
plt.title('CPU Usage Over Time')
plt.xlabel('Time')
plt.ylabel('CPU Usage')
plt.legend()
plt.show()

# Step 2: Fit a SARIMA Model

# Define the SARIMA model parameters
p, d, q = 1, 1, 1  # Non-seasonal ARIMA parameters
P, D, Q, s = 1, 1, 1, 7  # Seasonal ARIMA parameters (assuming weekly seasonality)

# Fit the SARIMA model
sarima_model = sm.tsa.statespace.SARIMAX(filtered_df['CpuUsageP95'],
                                         order=(p, d, q),
                                         seasonal_order=(P, D, Q, s),
                                         enforce_stationarity=False,
                                         enforce_invertibility=False)
sarima_result = sarima_model.fit()

# Step 3: Model Summary and Diagnostics
# Print the summary of the SARIMA model
print(sarima_result.summary())

# Plot diagnostics to check the residuals
sarima_result.plot_diagnostics(figsize=(15, 12))
plt.show()

# Step 4: Forecasting
# Forecast the next 30 time periods (you can adjust this as needed)
forecast_steps = 30
forecast = sarima_result.get_forecast(steps=forecast_steps)

# Get the confidence intervals of the forecast
forecast_ci = forecast.conf_int()

# Plot the forecast
plt.figure(figsize=(10, 6))
plt.plot(filtered_df['CpuUsageP95'], label='Observed')
plt.plot(forecast.predicted_mean, label='Forecast')
plt.fill_between(forecast_ci.index,
                 forecast_ci.iloc[:, 0],
                 forecast_ci.iloc[:, 1], color='k', alpha=0.2)
plt.title('SARIMA Forecast of CPU Usage')
plt.xlabel('Time')
plt.ylabel('CPU Usage')
plt.legend()
plt.show()

# Step 5: AIC and BIC for Model Evaluation
# Print AIC and BIC values to evaluate the model fit
print(f"AIC: {sarima_result.aic}, BIC: {sarima_result.bic}")
